using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using onlinekyc.DTOs;
using onlinekyc.Services;
using System.Threading.Tasks;

namespace onlinekyc.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize(Roles = "Admin")]
    public class AdminController : ControllerBase
    {
        private readonly IUserService _userService;

        public AdminController(IUserService userService)
        {
            _userService = userService;
        }

        [HttpPut("update-profile")]
        public async Task<IActionResult> UpdateProfile([FromBody] UpdateProfileDto updateProfileDto)
        {
            var result = await _userService.UpdateAdminProfileAsync(updateProfileDto.UserId, updateProfileDto.Username, updateProfileDto.Password);
            if (!result)
            {
                return BadRequest("Profile update failed.");
            }

            return Ok("Profile updated successfully.");
        }
    }
}
namespace onlinekyc.DTOs
{
    public class UpdateProfileDto
    {
        public int UserId { get; set; }
        public string Username { get; set; }
        public string Password { get; set; } // New password
    }
}
public async Task<bool> UpdateAdminProfileAsync(int userId, string username, string password)
{
    var user = await _context.Users.SingleOrDefaultAsync(u => u.UserId == userId && u.Role == "Admin");
    if (user == null)
    {
        return false;
    }

    user.Username = username;
    user.PasswordHash = ComputeSha256Hash(password);
    _context.Users.Update(user);
    await _context.SaveChangesAsync();
    return true;
}


--------------------------------------------------------------

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using onlinekyc.DTOs;
using onlinekyc.Services;
using System.Threading.Tasks;

namespace onlinekyc.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class AccountController : ControllerBase
    {
        private readonly IUserService _userService;

        public AccountController(IUserService userService)
        {
            _userService = userService;
        }

        [HttpPut("change-password")]
        [Authorize(Roles = "Customer, Admin")]
        public async Task<IActionResult> ChangePassword([FromBody] ChangePasswordDto changePasswordDto)
        {
            var result = await _userService.ChangePasswordAsync(changePasswordDto.UserId, changePasswordDto.OldPassword, changePasswordDto.NewPassword);
            if (!result)
            {
                return BadRequest("Password change failed.");
            }

            return Ok("Password changed successfully.");
        }
    }
}

namespace onlinekyc.DTOs
{
    public class ChangePasswordDto
    {
        public int UserId { get; set; }
        public string OldPassword { get; set; }
        public string NewPassword { get; set; }
    }
}
public async Task<bool> ChangePasswordAsync(int userId, string oldPassword, string newPassword)
{
    var user = await _context.Users.SingleOrDefaultAsync(u => u.UserId == userId);
    if (user == null)
    {
        return false;
    }

    var oldPasswordHash = ComputeSha256Hash(oldPassword);
    if (user.PasswordHash != oldPasswordHash)
    {
        return false;
    }

    user.PasswordHash = ComputeSha256Hash(newPassword);
    _context.Users.Update(user);
    await _context.SaveChangesAsync();
    return true;
}


---------------------------------------------------

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using onlinekyc.DTOs;
using onlinekyc.Services;
using System.Threading.Tasks;

namespace onlinekyc.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    [Authorize(Roles = "Admin")]
    public class KycApprovalController : ControllerBase
    {
        private readonly IKycDetailsService _kycDetailsService;

        public KycApprovalController(IKycDetailsService kycDetailsService)
        {
            _kycDetailsService = kycDetailsService;
        }

        [HttpPut("update-status")]
        public async Task<IActionResult> UpdateKycStatus([FromBody] KycStatusUpdateDto kycStatusUpdateDto)
        {
            if (kycStatusUpdateDto.KycStatus != "Approved" && kycStatusUpdateDto.KycStatus != "Rejected")
            {
                return BadRequest("Invalid KYC status.");
            }

            var result = await _kycDetailsService.UpdateKycStatusAsync(kycStatusUpdateDto.Id, kycStatusUpdateDto.KycStatus);
            if (!result)
            {
                return BadRequest("KYC status update failed.");
            }

            return Ok("KYC status updated successfully.");
        }
    }
}


namespace onlinekyc.DTOs
{
    public class KycStatusUpdateDto
    {
        public int Id { get; set; }
        public string KycStatus { get; set; } // 'Approved' or 'Rejected'
    }
}


using System.Threading.Tasks;

public interface IKycDetailsService
{
    Task<bool> UpdateKycStatusAsync(int id, string kycStatus);
}

using Microsoft.EntityFrameworkCore;
using onlinekyc.Data;
using onlinekyc.Models;
using System.Threading.Tasks;

public class KycDetailsService : IKycDetailsService
{
    private readonly KYCContext _context;

    public KycDetailsService(KYCContext context)
    {
        _context = context;
    }

    public async Task<bool> UpdateKycStatusAsync(int id, string kycStatus)
    {
        var kycDetails = await _context.UserKycDetails.SingleOrDefaultAsync(kyc => kyc.Id == id);
        if (kycDetails == null)
        {
            return false;
        }

        kycDetails.KycStatus = kycStatus;
        _context.UserKycDetails.Update(kycDetails);
        await _context.SaveChangesAsync();
        return true;
    }
}

