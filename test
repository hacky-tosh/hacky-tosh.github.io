import { TestBed } from '@angular/core/testing';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import { HttpResponse } from '@angular/common/http';
import { AuthService } from './auth.service';

describe('AuthService', () => {
  let service: AuthService;
  let httpMock: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [AuthService]
    });
    service = TestBed.inject(AuthService);
    httpMock = TestBed.inject(HttpTestingController);
  });

  afterEach(() => {
    httpMock.verify();
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  it('should login user', () => {
    const dummyResponse = {
      id: '123',
      email: 'test@example.com',
      token: 'dummy-token'
    };

    const email = 'test@example.com';
    const password = 'password';

    service.login(email, password).subscribe((res: HttpResponse<any>) => {
      expect(res.body.id).toEqual(dummyResponse.id);
      expect(res.body.email).toEqual(dummyResponse.email);
      expect(res.body.token).toEqual(dummyResponse.token);
    });

    const req = httpMock.expectOne('http://localhost:8080/api/auth/login');
    expect(req.request.method).toBe('POST');
    expect(req.request.body).toEqual({ email, password });

    req.flush(dummyResponse);
  });

  it('should handle login error', () => {
    const errorResponse = { status: 401, statusText: 'Unauthorized' };
    const email = 'test@example.com';
    const password = 'password';

    service.login(email, password).subscribe(
      () => {},
      error => {
        expect(error.status).toEqual(401);
        expect(error.statusText).toEqual('Unauthorized');
      }
    );

    const req = httpMock.expectOne('http://localhost:8080/api/auth/login');
    expect(req.request.method).toBe('POST');

    req.flush(null, errorResponse);
  });

  // Similar tests for signup method can be added here
});
