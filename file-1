@Test
public void shouldMapNestedTradeReviewManagerAndDesignatedSupervisor() throws JsonProcessingException {
    // Arrange
    ObjectMapper objectMapper = new ObjectMapper();
    User mockUser = random.nextObject(User.class);

    // Set nested objects for testing
    User tradeReviewManager = random.nextObject(User.class);
    User designatedSupervisor = random.nextObject(User.class);
    mockUser.setTradeReviewManager(tradeReviewManager);
    mockUser.setDesignatedSupervisor(designatedSupervisor);

    // Serialize the mock user to JSON
    String jsonResponse = objectMapper.writeValueAsString(mockUser);

    // Act
    Optional<User> actualUser = repository.mapApiResponseToUser(jsonResponse);

    // Assert
    assertThat(actualUser).isPresent();
    User resultUser = actualUser.get();
    assertThat(resultUser.getTradeReviewManager()).isEqualTo(tradeReviewManager);
    assertThat(resultUser.getDesignatedSupervisor()).isEqualTo(designatedSupervisor);
}
@Test
public void shouldMapNestedUsersWhenTradeReviewManagerAndDesignatedSupervisorAreNotNull() throws Exception {
    // Arrange
    User tradeReviewManager = random.nextObject(User.class);
    User designatedSupervisor = random.nextObject(User.class);

    User inputUser = random.nextObject(User.class);
    inputUser.setTradeReviewManager(tradeReviewManager);
    inputUser.setDesignatedSupervisor(designatedSupervisor);

    ObjectMapper objectMapper = new ObjectMapper();
    String jsonResponse = objectMapper.writeValueAsString(inputUser);

    // Mock mapNestedUser behavior if needed
    User mappedTradeReviewManager = random.nextObject(User.class);
    User mappedDesignatedSupervisor = random.nextObject(User.class);

    Repository spyRepository = spy(repository);
    doReturn(mappedTradeReviewManager).when(spyRepository).mapNestedUser(tradeReviewManager);
    doReturn(mappedDesignatedSupervisor).when(spyRepository).mapNestedUser(designatedSupervisor);

    // Act
    Method mapApiResponseToUserMethod = spyRepository.getClass().getDeclaredMethod("mapApiResponseToUser", String.class);
    mapApiResponseToUserMethod.setAccessible(true);
    Optional<User> result = (Optional<User>) mapApiResponseToUserMethod.invoke(spyRepository, jsonResponse);

    // Assert
    assertThat(result).isPresent();
    User resultUser = result.get();

    // Ensure the nested users were mapped correctly
    assertThat(resultUser.getTradeReviewManager()).isEqualTo(mappedTradeReviewManager);
    assertThat(resultUser.getDesignatedSupervisor()).isEqualTo(mappedDesignatedSupervisor);

    // Verify mapNestedUser was called for both fields
    verify(spyRepository).mapNestedUser(tradeReviewManager);
    verify(spyRepository).mapNestedUser(designatedSupervisor);
}







@Test
public void shouldSetValidUntilWhenCountryIsPresentInDb() {
    // Given
    Trade trade = new Trade();
    trade.setStatus(TradeStatus.APPROVED);
    trade.setIsLimitOrder(true); // Ensure it's a limit order
    trades = Collections.singletonList(trade);

    LimitOrderConfigurationEntity configEntity = new LimitOrderConfigurationEntity();
    configEntity.setCountry("US"); // Matching country
    configEntity.setDays("5"); // Number of days from DB
    countryData = Collections.singletonList(configEntity);

    holidays = Collections.emptyList(); // No holidays for this test

    // Mock the current date to ensure consistency
    LocalDate fixedDate = LocalDate.of(2024, 12, 9);
    try (MockedStatic<LocalDate> mockedLocalDate = mockStatic(LocalDate.class)) {
        mockedLocalDate.when(() -> LocalDate.now(any(ZoneId.class))).thenReturn(fixedDate);

        // Mock the requester and timezone behavior
        when(requester.getCountry()).thenReturn("US");
        when(getTimeZoneId("US")).thenReturn("America/New_York");

        // When
        preApproval.setValidUntil(holidays, countryData);

        // Then
        LocalDateTime expectedValidUntil = fixedDate.plusDays(5) // Add extra days from config
                .atTime(23, 59, 59);
        assertThat(trade.getValidUntil()).isEqualTo(expectedValidUntil);
    }
}


@Test
public void shouldSetValidUntilForApprovedLimitOrderWithCountryInDb() {
    // Given
    Trade approvedTrade = random.nextObject(Trade.class);
    approvedTrade.setStatus(TradeStatus.APPROVED);
    approvedTrade.setIsLimitOrder(true);
    trades = Collections.singletonList(approvedTrade);

    LimitOrderConfigurationEntity configEntity = random.nextObject(LimitOrderConfigurationEntity.class);
    configEntity.setCountry(requester.getCountry());
    configEntity.setDays("5");
    countryData = Collections.singletonList(configEntity);

    // When
    preApproval.setValidUntil(holidays, countryData);

    // Then
    LocalDateTime expectedValidUntil = LocalDate.now(ZoneId.of(getTimeZoneId(requester.getCountry())))
            .plusDays(5)
            .atTime(23, 59, 59);
    assertThat(approvedTrade.getValidUntil()).isEqualTo(expectedValidUntil);
}

@Test
public void shouldSetValidUntilForApprovedLimitOrderWithCountryNotInDb() {
    // Given
    Trade approvedTrade = random.nextObject(Trade.class);
    approvedTrade.setStatus(TradeStatus.APPROVED);
    approvedTrade.setIsLimitOrder(true);
    trades = Collections.singletonList(approvedTrade);

    countryData = Collections.emptyList(); // No country data in DB

    // Mock holidays
    holidays = random.objects(Holiday.class, 3).collect(Collectors.toList());

    // When
    preApproval.setValidUntil(holidays, countryData);

    // Then
    LocalDateTime expectedValidUntil = preApproval.addBusinessday(approvedTrade.getBusinessDays(), holidays);
    assertThat(approvedTrade.getValidUntil()).isEqualTo(expectedValidUntil);
}

@Test
public void shouldSetValidUntilForApprovedNonLimitOrder() {
    // Given
    Trade approvedTrade = random.nextObject(Trade.class);
    approvedTrade.setStatus(TradeStatus.APPROVED);
    approvedTrade.setIsLimitOrder(false);
    trades = Collections.singletonList(approvedTrade);

    // Mock holidays
    holidays = random.objects(Holiday.class, 3).collect(Collectors.toList());

    // When
    preApproval.setValidUntil(holidays, countryData);

    // Then
    LocalDateTime expectedValidUntil = preApproval.addBusinessday(approvedTrade.getBusinessDays(), holidays);
    assertThat(approvedTrade.getValidUntil()).isEqualTo(expectedValidUntil);
}

@Test
public void shouldNotSetValidUntilForNonApprovedTrade() {
    // Given
    Trade nonApprovedTrade = random.nextObject(Trade.class);
    nonApprovedTrade.setStatus(TradeStatus.PENDING); // Not approved
    trades = Collections.singletonList(nonApprovedTrade);

    // When
    preApproval.setValidUntil(holidays, countryData);

    // Then
    assertThat(nonApprovedTrade.getValidUntil()).isNull();
}
